apiVersion: backstage.io/v1beta2
kind: Template
metadata:
  name: docs-template
  title: Template de Documentação
  description: Criar um novo item simples de documentação
  tags:
    - techdocs
spec:
  owner: backstage/techdocs-core
  type: documentação

  parameters:
    - title: Preencha os campos abaixo
      required:
        - name
        - description
      properties:
        name:
          title: Name
          type: string
          description: Nome único para o componente
          ui:autofocus: true
          ui:options:
            rows: 5
        description:
          title: Description
          type: string
          description: Uma breve descrição para o item de documentação
          ui:options:
            rows: 5
        owner:
          title: Responsável
          type: string
          description: Responsável pelo componente
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Localização do Repositóro
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com

  # This template is meant to be used on top of an existing template.
  # By adding the following and fetching from an absolute URL you can
  # add in the docs template
  steps:
    - id: fetch
      name: Template Docs Skeleton
      action: fetch:template
      input:
        url: ./skeleton
        values:
          name: "{{ parameters.name }}"
          description: "{{ parameters.description }}"
          destination: "{{ parseRepoUrl parameters.repoUrl }}"
          owner: "{{ parameters.owner }}"

    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ["github.com"]
        description: "This is {{ parameters.component_id }}"
        repoUrl: "{{ parameters.repoUrl }}"

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: "{{ steps.publish.output.repoContentsUrl }}"
        catalogInfoPath: "/catalog-info.yaml"

  output:
    remoteUrl: "{{ steps.publish.output.remoteUrl }}"
    entityRef: "{{ steps.register.output.entityRef }}"
